* early-init.el
** Package management
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
  (require 'package)
  (require 'use-package-ensure)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (setopt use-package-always-ensure t)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
* init.el
** Frame options
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (defvar leanmc-default-font "Victor Mono-20")
  (defvar leanmc-variable-pitch-font "CMU Serif-22")
  (dolist (x
	   `((fullscreen . fullboth)
	     (font . ,leanmc-default-font)))
    (add-to-list 'default-frame-alist x)
    (add-to-list 'initial-frame-alist x))
#+end_src
** Ergonomics on macOS
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (when (eq system-type 'darwin)
    (setopt
     ns-command-modifier 'control
     ns-option-modifier 'meta
     ns-control-modifier 'super))
#+end_src
** Flash modeline for system bell
Instead of beeping audibly or flashing the entire frame, flash the modeline.
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (defun flash-mode-line()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))

  (setopt visible-bell nil
	  ring-bell-function 'flash-mode-line)
#+end_src
** Hide the help
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (setopt inhibit-startup-screen t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src
** Line numbers
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (global-display-line-numbers-mode)
  (setopt display-line-numbers-type 'relative)
#+end_src
** Cursor options
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (setopt blink-cursor-mode nil)
  (global-hl-line-mode 1)
#+end_src
** Completion options
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (setopt completion-auto-wrap t
	  completion-auto-help 'always
	  completions-max-height 15
	  completions-format 'one-column
	  completion-auto-select 'second-tab
	  completions-detailed t)
  (fido-vertical-mode 1)
#+end_src
** Close parens, quotes, etc.
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (electric-pair-mode 1)
#+end_src
** Appearance
Nice variable and fixed pitch fonts
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (set-face-font 'fixed-pitch leanmc-default-font)
  (set-face-font 'variable-pitch leanmc-variable-pitch-font)
#+end_src
=variable-pitch-mode= for text modes
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (add-hook 'text-mode-hook #'variable-pitch-mode)
#+end_src
A nice theme
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (use-package dracula-theme
    :config
    (load-theme 'dracula t nil))
#+end_src
Icons, and some sprucing up of the buffer list and =dired=
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))

  (add-hook 'dired-mode-hook 'dired-hide-details-mode)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (use-package all-the-icons-ibuffer
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

  (use-package all-the-icons-completion
    :config (all-the-icons-completion-mode))
#+end_src
A nice, uncluttered modeline.
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (setopt display-time-default-load-average nil)
  (setopt display-time-day-and-date t)
  (setopt display-time-format "%a %m/%d at %I:%M%p")
  (display-time)
  (defun leanmc-modeline ()
    (let*
	((modified-icon (let* ((config-alist
				'(("*" all-the-icons-faicon-family
				   all-the-icons-faicon "chain-broken" :height 1.2 :v-adjust -0.0)
				  ("-" all-the-icons-faicon-family
				   all-the-icons-faicon "link" :height 1.2 :v-adjust -0.0)
				  ("%" all-the-icons-octicon-family
				   all-the-icons-octicon "lock" :height 1.2 :v-adjust 0.1)))
			       (result (cdr (assoc (format-mode-line "%*") config-alist))))
			  (propertize (apply (cadr result) (cddr result))
				      'face `(:family ,(funcall (car result))))))
	 (left (format-mode-line `(" ",modified-icon" ",mode-line-buffer-identification)))
	 (mode-icon (propertize (all-the-icons-icon-for-mode major-mode)
				'help-echo (format "Major-mode: %s" major-mode)
				'local-map mode-line-major-mode-keymap))
	 (right (format-mode-line `(,mode-icon" ",mode-line-misc-info)))
	 (available-width (- (window-width) (length left) 4)))
      (format (format " %%s %%%ds " available-width) left right)))
  (setq-default mode-line-format '(:eval (leanmc-modeline)))
#+end_src
** Org options
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
    (setopt org-hide-emphasis-markers t
	    org-startup-folded t)
    (defun leanmc-org-mode-hook ()
      (variable-pitch-mode 1)
      (visual-line-mode 1)
      (dolist (f (list 'org-block 'org-code 'org-table 'line-number))
	(set-face-attribute f nil :inherit 'fixed-pitch))
      (dolist (f (list 'org-block-begin-line 'org-block-end-line 'org-meta-line))
	(set-face-attribute f nil :inherit '(shadow fixed-pitch)))
      (set-face-attribute 'org-verbatim nil :inherit '(org-quote fixed-pitch)))
    (add-hook 'org-mode-hook 'leanmc-org-mode-hook)
#+end_src
** Ledger options
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (use-package ledger-mode
    :mode ("\\.dat\\'"
	   "\\.ledger\\'")
    :config (when (eq system-type 'windows-nt) (setq ledger-binary-path "~/ledger.exe")))
#+end_src
** Magit
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
  (setq auth-sources '("~/.authinfo"))
  (use-package magit)
#+end_src
