* early-init.el
** Package config
Use =use-package= and have it automatically ensure
packages are installed.

#+begin_src emacs-lisp :tangle "early-init.el"
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (setq package-enable-at-startup t)

  (setq use-package-always-ensure t)
#+end_src

* init.el
** Frame Size and Default Font
Fill the left half of the screen and set the font to Iosevka.

#+begin_src emacs-lisp :tangle "init.el"

  (dolist (var '((left . 0)
		 (top . 0)
		 (fullscreen . fullheight)
		 (width . 0.5)
		 (font . "Iosevka-16")
		 (undecorated . t)))
    (add-to-list 'default-frame-alist var)
    (add-to-list 'initial-frame-alist var))
#+end_src
** macOS Modifier Keys
On Macs, the =ns-*-modifier= commands allow for an easy way to put the
control key under your thumbs, with meta nearby.

#+begin_src emacs-lisp :tangle "init.el"
(when (eq system-type 'darwin)
  (setq
   ns-command-modifier 'control
   ns-option-modifier 'meta
   ns-control-modifier 'super))
#+end_src
** Flash Modeline for Bell
Instead of beeping audibly or flashing the entire frame, flash the
modeline when bell-worthy actions are attempted.

#+begin_src emacs-lisp :tangle "init.el"
  (defun flash-mode-line()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))

  (setq visible-bell nil
	ring-bell-function 'flash-mode-line)
#+end_src
** Remove the Help
Remove the menu, scroll and tool bars.

#+begin_src emacs-lisp :tangle "init.el"
  (setq inhibit-startup-screen t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src
** Logical Lines, Track End of Line
Have =C-n= and =C-p= move by logical lines, even if they are too long to
fit the width of the window/frame. When using these commands at the
end of a line, have them track the end of the line rather than a
specific column.

#+begin_src emacs-lisp :tangle "init.el"
  (setq line-move-visual nil
	track-eol t)
#+end_src
** Line Numbers
Relative line numbers allow me to easily jump to any visible line with
an argument to =next-line= or =previous-line=.

#+begin_src emacs-lisp :tangle "init.el"
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src
** Cursor Highlighting and Styling
Bar cursor. To make it easier to find, I like to have it always blink
and to highlight the line it's on.

#+begin_src emacs-lisp :tangle "init.el"
  (setq-default cursor-type 'bar)
  (setq-default blink-cursor-blinks 0)
  (global-hl-line-mode 1)
#+end_src
** Completion
So far, =fido-vertical-mode= without any alteration has provided me with
all I need. I enjoy using =C-n= and =C-p= to navigate completion options,
and most of the time the fuzzy matching is more convenience than
annoyance.

#+begin_src emacs-lisp :tangle "init.el"
  (fido-vertical-mode 1)
#+end_src

While editing, =company= has served me well.
#+begin_src emacs-lisp :tangle "init.el"
  (use-package company
    :config
    (global-company-mode))
#+end_src
** Recent Files, Save Location
=recentf= for easily opening recently edited files. Save my place in
files.

#+begin_src emacs-lisp :tangle "init.el"
    (use-package recentf
	:bind ("C-x C-r" . recentf-open)
	:ensure nil)
    (save-place-mode 1)
#+end_src
** Electric Pair Mode
I almost never want an unclosed bracket, curly brace, parenthesis,
etc. Electric pair mode saves me the trouble of typing the closer.

#+begin_src emacs-lisp :tangle "init.el"
  (electric-pair-mode 1)
#+end_src
** Font and Ligatures
Georgia for variable pitch

#+begin_src emacs-lisp :tangle "init.el"
  (set-face-font 'variable-pitch "Georgia-16")
#+end_src

Ligatures in =prog-mode=
#+begin_src emacs-lisp :tangle "init.el"
  (use-package ligature
  :load-path "path-to-ligature-repo"
  :config
  ;; Enable all Iosevka ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                       "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                       "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                       ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

Install =mixed-pitch= and use it in text modes

#+begin_src emacs-lisp :tangle "init.el"
(use-package mixed-pitch
  :hook
  ;; If you want it in all text modes:
  (text-mode . mixed-pitch-mode))
#+end_src
** Themes and Icons Everywhere
The theme of the moment is: Dracula.

#+begin_src emacs-lisp :tangle "init.el"
      (use-package dracula-theme
	:config
	(load-theme 'dracula t nil))
#+end_src

Icons

#+begin_src emacs-lisp :tangle "init.el"
    (use-package all-the-icons
      :if (display-graphic-p))
#+end_src

Icons in =dired=. Have =dired= hide details by default:

#+begin_src emacs-lisp :tangle "init.el"
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src

iBuffer? Yes please. iBuffer with icons? Very yes.

#+begin_src emacs-lisp :tangle "init.el"
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (use-package all-the-icons-ibuffer
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src

Icons in my completions:

#+begin_src emacs-lisp :tangle "init.el"
  (use-package all-the-icons-completion
    :init (all-the-icons-completion-mode))
#+end_src
** Modeline

Custom, minimal modeline. Icons for edit status and major mode plus
strings with buffer name and position as a percentage.

#+begin_src emacs-lisp :tangle "init.el"
	  ;; taken from https://emacs.stackexchange.com/questions/5529/how-to-right-align-some-items-in-the-modeline
	  ;; this allows for some items to be right-justified. will be obsolete in emacs30 with mode-line-format-right-align
	   (defun leanmc-left-right-modeline (left right)
	   "Return a string of `window-width' length containing LEFT, and RIGHT
	  aligned respectively."
	   (let* ((available-width (- (window-width) (length left) 2)))
	     (format (format " %%s %%%ds " available-width) left right)))

	   (defun leanmc-modeline-icon-buffer-edit-status ()
	     "Return a lock icon if file is read-only, link if it's unedited, or broken link if it's edited"
	     (if buffer-read-only
		 (propertize (format "%s" (all-the-icons-faicon "lock"))
			     'help-echo "Read-only")
	       (if (buffer-modified-p)
		   (propertize (format "%s" (all-the-icons-faicon "chain-broken"))
			       'help-echo "Edited")
		 (propertize (format "%s" (all-the-icons-faicon "link"))
			     'help-echo "No changes"))))

	   (defun leanmc-modeline-icon-major-mode ()
	     "Return an icon for the current major mode"
	     (propertize (all-the-icons-icon-for-mode major-mode)
			 'help-echo (format "%s" major-mode)
			 'local-map mode-line-major-mode-keymap))

	   ;;Bring it all together with setq-default and the :eval keyword, along with some more % constructs
	   (setq-default mode-line-format '((:eval
					     (leanmc-left-right-modeline
					      (format-mode-line
					       (concat
						"%e "
						(leanmc-modeline-icon-buffer-edit-status)
						" %b"))
					      (format-mode-line
					       (concat
						"%p%% "
						(format " %s " (leanmc-modeline-icon-major-mode))))))))
#+end_src
** Org Configuration
Hide formatting markers (*, _, =, etc) and show styled text
instead. 
#+begin_src emacs-lisp :tangle "init.el"
  (setq org-hide-emphasis-markers t)
#+end_src
** Magit Configuration
Avoid confusion about where the Github token is stored.

#+begin_src emacs-lisp :tangle "init.el"
  (setq auth-sources '("~/.authinfo"))
  (use-package forge
    :after magit)
#+end_src
** Ledger Configuration
Enable =ledger-mode= and =flycheck-ledger=.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package ledger-mode
    :mode ("\\.dat\\'"
           "\\.ledger\\'"))
;;    :custom (ledger-clear-whole-transactions t))
       
  (use-package flycheck-ledger :after ledger-mode)
#+end_src
