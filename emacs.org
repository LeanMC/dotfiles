* early-init.el
:PROPERTIES:
:header-args: :tangle "~/.emacs.d/early-init.el"
:END:
** Package management
#+begin_src emacs-lisp
  (require 'package)
  (require 'use-package-ensure)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (setopt use-package-always-ensure t)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
* init.el
:PROPERTIES:
:header-args: :tangle "~/.emacs.d/init.el"
:END:
** Frame options
:PROPERTIES:
:ID:       f96ed644-792c-40ea-85f5-92f04b4e3ff6
:END:
#+begin_src emacs-lisp
  (setq leanmc-default-font "Iosevka-20")
  (setq leanmc-variable-pitch-font "CMU Serif-22")
  (dolist (x
  	 `((fullscreen . fullboth)
  	   (font . ,leanmc-default-font)))
    (add-to-list 'default-frame-alist x)
    (add-to-list 'initial-frame-alist x))
#+end_src
These lists track faces that should use a monospaced font, for use in [[id:29773854-7007-4d58-9734-44942486fa55][Cursor options]] and in [[id:6b3719c9-87d2-4b92-8998-3a9bc163a2a9][Org options]].
#+begin_src emacs-lisp
  (setq fixed-general-faces
        '(line-number
  	org-checkbox
  	org-code
  	org-document-info
  	org-document-title
  	org-date
  	org-property-value
  	org-table
  	org-block))
  (setq fixed-shadow-faces
        '(org-block-end-line
  	org-document-info-keyword
  	org-drawer
  	org-meta-line
  	org-special-keyword
  	org-block-begin-line))
  (setq fixed-faces (append fixed-general-faces fixed-shadow-faces))
#+end_src
** Ergonomics on macOS
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setopt
     ns-command-modifier 'control
     ns-option-modifier 'meta
     ns-control-modifier 'super))
#+end_src
** Flash modeline for system bell
Instead of beeping audibly or flashing the entire frame, flash the modeline.
#+begin_src emacs-lisp
  (defun flash-mode-line()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))

  (setopt visible-bell nil
  	ring-bell-function 'flash-mode-line)
#+end_src
** Hide the help
#+begin_src emacs-lisp
  (setopt inhibit-startup-screen t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setopt display-line-numbers-type 'visual
  	display-line-numbers-width-start t)
#+end_src
** Cursor options
:PROPERTIES:
:ID:       29773854-7007-4d58-9734-44942486fa55
:END:
Red color. Never blink. Highlight the current line.
#+begin_src emacs-lisp
  (set-face-attribute 'cursor nil :background "red")
  (blink-cursor-mode 0)
  (global-hl-line-mode 1)
#+end_src
Function run after each command (via a hook added in [[id:6b3719c9-87d2-4b92-8998-3a9bc163a2a9][Org options]]) to set cursor to box for fixed pitch faces and bar for variable.
#+begin_src emacs-lisp
  (defun leanmc-sync-cursor-type-with-pitch ()
    "Set cursor-type to box in fixed-pitch and bar in variable-pitch"
    (let ((point-faces (get-text-property (point) 'face)))
      (if (listp point-faces)
  	(if (leanmc-list-intersect-p point-faces fixed-faces)
  	    (setq cursor-type 'box)
  	  (setq cursor-type 'bar))
        (if (member point-faces fixed-faces)
  	  (setq cursor-type 'box)
  	(setq cursor-type 'bar)))))

  (defun leanmc-list-intersect-p (list1 list2)
    "Return non-nil if any elements of LIST1 appear in LIST2.
  Comparison is done with `equal'."
    (while (and list1 (not (member (car list1) list2)))
      (pop list1))
    list1)
#+end_src
** Completion options
#+begin_src emacs-lisp
  (setopt completion-auto-wrap t
    	completion-auto-help 'visible
    	completions-max-height 15
    	completions-format 'vertical
    	completion-auto-select 'second-tab
    	completions-detailed t)
  (fido-vertical-mode 1)
  (global-completion-preview-mode 1)
  (define-key completion-preview-active-mode-map (kbd "M-n") 'completion-preview-next-candidate)
  (define-key completion-preview-active-mode-map (kbd "M-p") 'completion-preview-prev-candidate)
  (define-key completion-preview-active-mode-map (kbd "RET") 'completion-preview-insert)
#+end_src
** Close parens, quotes, etc.
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src
** Appearance
Options for fixed and variable pitch fonts. Uses variables set in [[id:f96ed644-792c-40ea-85f5-92f04b4e3ff6][Frame options]].
#+begin_src emacs-lisp
  (set-face-font 'fixed-pitch leanmc-default-font)
  (set-face-font 'variable-pitch leanmc-variable-pitch-font)
  (add-hook 'text-mode-hook 'variable-pitch-mode)
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'buffer-face-mode-hook
  	  (lambda ()
  	    (if buffer-face-mode
  		(setq cursor-type 'bar)
  	      (setq cursor-type 'box))))
#+end_src
Theme and its options.
#+begin_src emacs-lisp
  (setopt modus-themes-italic-constructs t
  	modus-themes-bold-constructs t
  	modus-themes-prompts '(bold)
  	modus-themes-headings
  	'((5 . (1.1))
  	  (4 . (1.2))
  	  (3 . (1.3))
  	  (2 . (1.4))
  	  (1 . (1.5))))
  (load-theme 'modus-vivendi-tinted)
#+end_src
Icons everywhere.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))

  (add-hook 'dired-mode-hook 'dired-hide-details-mode)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (use-package all-the-icons-ibuffer
    :after all-the-icons
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

  (use-package all-the-icons-completion
    :after all-the-icons
    :config (all-the-icons-completion-mode))
#+end_src
Custom mode line.
#+begin_src emacs-lisp
  (setopt display-time-default-load-average nil
  	display-time-day-and-date t
  	display-time-format "%a %m/%d at %I:%M%p")
  (display-time)
  (let*
      ((modified-icon '(:eval
  		      (let* ((config-alist
                                '(("*" all-the-icons-faicon-family
  				 all-the-icons-faicon "chain-broken" :height 1.2 :v-adjust -0.0)
  				("-" all-the-icons-faicon-family
  				 all-the-icons-faicon "link" :height 1.2 :v-adjust -0.0)
  				("%" all-the-icons-octicon-family
  				 all-the-icons-octicon "lock" :height 1.2 :v-adjust 0.1)))
  			     (result (cdr (assoc (format-mode-line "%*") config-alist))))
  			(propertize (apply (cadr result) (cddr result))
  				    'face `(:family ,(funcall (car result)))))))
       (mode-icon '(:eval (propertize (all-the-icons-icon-for-mode major-mode)
  				    'help-echo (format "Major-mode: %s" major-mode)
  				    'local-map mode-line-major-mode-keymap))))
    (setq-default mode-line-format `(" "
  				   ,modified-icon
  				   " "
  				   ,mode-line-buffer-identification
  				   mode-line-format-right-align
  				   ,mode-icon
  				   " "
  				   ,mode-line-misc-info
  				   " ")))
#+end_src
** Org options
:PROPERTIES:
:ID:       6b3719c9-87d2-4b92-8998-3a9bc163a2a9
:END:
#+begin_src emacs-lisp
  (setopt org-hide-emphasis-markers t
  	org-startup-folded 'fold
  	org-hide-block-startup t
  	org-id-link-to-org-use-id t
  	org-return-follows-link t
  	org-tab-follows-link t
  	org-cycle-emulate-tab 'whitestart
  	org-agenda-files '("~/Dropbox/org/life.org"))
#+end_src
When org starts, set monospaced faces (using lists set in [[*Frame options][Frame options]]) and run the function defined in [[id:29773854-7007-4d58-9734-44942486fa55][Cursor options]] after each command to change the cursor type.
#+begin_src emacs-lisp
  (defun leanmc-org-mode-hook ()
    (dolist (face fixed-general-faces)
      (set-face-attribute face nil :inherit 'fixed-pitch))
    (dolist (face fixed-shadow-faces)
      (set-face-attribute face nil :inherit '(shadow fixed-pitch)))
    (set-face-attribute 'org-verbatim nil :inherit '(org-quote fixed-pitch))
    (add-hook 'post-command-hook 'leanmc-sync-cursor-type-with-pitch 0 t)
    (define-key org-mode-map (kbd "C-c C-a") #'org-agenda)
    (setq-local completion-preview-commands
                '(;; self-insert-command
                  org-self-insert-command
                  insert-char
                  ;; delete-backward-char
                  org-delete-backward-char
                  backward-delete-char-untabify
                  analyze-text-conversion
                  completion-preview-complete)))

  (add-hook 'org-mode-hook 'leanmc-org-mode-hook)
#+end_src
** Ledger options
#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode ("\\.dat\\'"
  	 "\\.ledger\\'")
    :config (when (eq system-type 'windows-nt) (setq ledger-binary-path "~/ledger.exe")))
#+end_src
** Magit
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo"))
  (use-package magit)
#+end_src
** ERC
#+begin_src emacs-lisp
  (setopt erc-modules
  	'(autojoin
  	  button
  	  completion
  	  fill
  	  irccontrols
  	  list
  	  match
  	  menu
  	  move-to-prompt
  	  netsplit
  	  networks
  	  noncommands
  	  notifications
  	  readonly
  	  ring
  	  sasl
  	  spelling
  	  stamp
  	  track)
  	erc-autojoin-channels-alist
  	'(("libera.chat" "#emacs"))
  	erc-autojoin-timing 'ident
  	erc-hide-list
  	'("JOIN" "PART" "QUIT")
  	erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
  				  "324" "329" "332" "333" "353" "477"))
#+end_src
