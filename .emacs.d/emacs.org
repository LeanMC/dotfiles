* early-init.el
** Package management
#+begin_src emacs-lisp :tangle "early-init.el"
  (require 'package)
  (require 'use-package-ensure)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (setopt use-package-always-ensure t)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
* init.el
** Frame options
#+begin_src emacs-lisp :tangle "init.el"
  (defvar leanmc-default-font "Victor Mono-20")
  (defvar leanmc-variable-pitch-font "CMU Serif-20")
  (dolist (x
	   `((fullscreen . fullboth)
	     (font . ,leanmc-default-font)))
    (add-to-list 'default-frame-alist x)
    (add-to-list 'initial-frame-alist x))
#+end_src
** Ergonomics on macOS
#+begin_src emacs-lisp :tangle "init.el"
  (when (eq system-type 'darwin)
    (setopt
     ns-command-modifier 'control
     ns-option-modifier 'meta
     ns-control-modifier 'super))
#+end_src
** Flash modeline for system bell
Instead of beeping audibly or flashing the entire frame, flash the modeline.
#+begin_src emacs-lisp :tangle "init.el"
  (defun flash-mode-line()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))

  (setopt visible-bell nil
	ring-bell-function 'flash-mode-line)
#+end_src
** Hide the help
#+begin_src emacs-lisp :tangle "init.el"
  (setopt inhibit-startup-screen t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src
** Line numbers
#+begin_src emacs-lisp :tangle "init.el"
  (global-display-line-numbers-mode)
  (setopt display-line-numbers-type 'relative)
#+end_src
** Cursor options
#+begin_src emacs-lisp :tangle "init.el"
  (setopt blink-cursor-mode nil)
  (global-hl-line-mode 1)
#+end_src
** Completion options
#+begin_src emacs-lisp :tangle "init.el"
  (fido-vertical-mode 1)
  (setopt completion-auto-help 'always)
  (setopt completions-max-height 20)
  (setopt completions-format 'one-column)
  (setopt completion-auto-select 'second-tab)
  (setopt completions-detailed t)
#+end_src
** Close parens, quotes, etc.
#+begin_src emacs-lisp :tangle "init.el"
  (electric-pair-mode 1)
#+end_src
** Appearance
Nice variable and fixed pitch fonts
#+begin_src emacs-lisp :tangle "init.el"
  (set-face-font 'fixed-pitch leanmc-default-font)
  (set-face-font 'variable-pitch leanmc-variable-pitch-font)
#+end_src
A nice theme
#+begin_src emacs-lisp :tangle "init.el"
  (use-package color-theme-sanityinc-tomorrow
    :config
    (load-theme 'sanityinc-tomorrow-night t nil))
#+end_src
Icons, and some sprucing up of the buffer list and =dired=
#+begin_src emacs-lisp :tangle "init.el"
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))

  (add-hook 'dired-mode-hook 'dired-hide-details-mode)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (use-package all-the-icons-ibuffer
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

  (use-package all-the-icons-completion
    :config (all-the-icons-completion-mode))
#+end_src
A nice, uncluttered modeline.
#+begin_src emacs-lisp :tangle "init.el"
  ;; emacs 30 will make much of this code unnecessary with the addition of mode-line-format-right-align
  (defun leanmc-left-right-modeline (left right)
    "Return a string of `window-width' length containing LEFT, and RIGHT
  aligned respectively."
    (let* ((available-width (- (window-width) (length left) 10)))
      (format (format " %%s %%%ds " available-width) left right)))


  (defun leanmc-modeline-icon-buffer-edit-status ()
    "Return a lock icon if file is read-only, link if it's unedited, or broken link if it's edited"
    (if buffer-read-only
	(propertize (format "%s" (all-the-icons-faicon "lock"))
		    'help-echo "Read-only")
      (if (buffer-modified-p)
	  (propertize (format "%s" (all-the-icons-faicon "chain-broken"))
		      'help-echo "Edited")
	(propertize (format "%s" (all-the-icons-faicon "link"))
		    'help-echo "No changes"))))


  (defun leanmc-modeline-icon-major-mode ()
    "Return an icon for the current major mode"
    (propertize (all-the-icons-icon-for-mode major-mode)
		'help-echo (format "%s" major-mode)
		'local-map mode-line-major-mode-keymap))


  ;;Bring it all together with setq-default and the :eval keyword, along with some more % constructs
  (setq-default mode-line-format '((:eval
				    (leanmc-left-right-modeline
				     (format-mode-line
				      (concat
				       "%e "
				       (leanmc-modeline-icon-buffer-edit-status)
				       " %b"))
				     (format-mode-line
				      (concat
				       "%p%% "
				       (format " %s " (leanmc-modeline-icon-major-mode))))))))
#+end_src
** Org options
#+begin_src emacs-lisp :tangle "init.el"
  (setopt org-hide-emphasis-markers t)
  (setopt org-startup-folded t)
  (defun leanmc-org-mode-hook ()
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (dolist (f (list 'org-block 'org-code 'org-table 'org-block-begin-line 'org-block-end-line 'org-meta-line 'line-number))
      (set-face-attribute f nil :inherit 'fixed-pitch)))
  (add-hook 'org-mode-hook 'leanmc-org-mode-hook)
#+end_src
** Ledger options
#+begin_src emacs-lisp :tangle "init.el"
  (use-package ledger-mode
    :mode ("\\.dat\\'"
	   "\\.ledger\\'")
    :config (when (eq system-type 'windows-nt) (setq ledger-binary-path "~/ledger.exe")))
#+end_src
** Magit
#+begin_src emacs-lisp :tangle "init.el"
  (setq auth-sources '("~/.authinfo"))
  (use-package magit)
#+end_src
